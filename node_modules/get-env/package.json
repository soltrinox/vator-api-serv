{
  "name": "get-env",
  "version": "0.4.0",
  "description": "Return `dev`, `prod`, or optional extra environements based on `process.env.NODE_ENV`",
  "license": "MIT",
  "author": {
    "name": "Pilwon Huh",
    "email": "pilwon@gmail.com"
  },
  "homepage": "https://github.com/pilwon/node-get-env",
  "repository": {
    "type": "git",
    "url": "git://github.com/pilwon/node-get-env.git"
  },
  "keywords": [
    "env",
    "environment",
    "envvar",
    "nodeenv",
    "node_env",
    "dev",
    "development",
    "prod",
    "production"
  ],
  "dependencies": {
    "lodash": "^2.4.1"
  },
  "scripts": {
    "prepublish": "npm prune"
  },
  "readme": "[![NPM](https://nodei.co/npm/get-env.png?downloads=false&stars=false)](https://npmjs.org/package/get-env) [![NPM](https://nodei.co/npm-dl/get-env.png?months=6)](https://npmjs.org/package/get-env)\n\n\n# get-env\n\n`get-env` is a [Node.js](http://nodejs.org/) library returning `dev`, `prod`, or optional extra environments based on `process.env.NODE_ENV`.\n\n* [get-config](https://github.com/pilwon/node-get-config) uses this library to parse `process.env.NODE_ENV`.\n\n\n## Why use this library?\n\nMany people use the following simple line of code, but there are some disadvantages to this approach:\n\n    var env = process.env.NODE_ENV || 'development';\n\n1. If your code tests against, `development` and `production` (for example), then you must only use those values for `NODE_ENV`. `get-env` library accepts multiple alternative values as rules for an environment, therefore you can make unlimited number aliases to the same environment same. This lets you forget about the exact string value you used in your code, which means you can use whatever value that comes naturally to your mind whenever you switch environments. All environment names matched by this library are case-insensitive as well.\n\n2. If you supply an unregistered value for `NODE_ENV` (for example, `productoin` instead of `production` -- that is a typo), the `env` variable is now set to this wrong value and the rest of code that tests against this variable would have an unexpected behavior. This library fixes this problem by throwing an error on unregistered and non-empty value set to `NODE_ENV`. An empty value is resolved to `dev` environment.\n\n3. If you start adding more extra environments (ex: staging, test, etc.) then it won't be a simple one line of code anymore. This library provides consistent, straightforward, and flexible extra environment addition methods therefore you can freely add or remove environments with minimal overhead in your code while keeping all the above mentioned benefits.\n\nBasically, this library provides a consistent, reliable, scalable way to parse the `NODE_ENV` environment variable so it is ready for you to use from an app targetting multiple environments.\n\n\n## Examples\n\nThe following single line of code ...\n\n```js\nvar env = require('get-env')();\n```\n\n... is equivalent to ...\n\n```js\nvar nodeEnv = (process.env.NODE_ENV || '').toLowerCase();\nvar env;\nif (nodeEnv === 'prod' || nodeEnv === 'production') {\n  env = 'prod';\n} else if (nodeEnv === 'dev' || nodeEnv === 'development' || nodeEnv === '') {\n  env = 'dev';\n} else {\n  throw new Error('Unknown environment name: NODE_ENV=' + nodeEnv);\n}\n```\n\nFor slightly more complex example, the following lengthy code ...\n\n```js\nvar env;\nif (process.env.NODE_ENV === 'production' || process.env.NODE_ENV === 'prod') {\n  env = 'prod';\n} else if (process.env.NODE_ENV === 'staging') {\n  env = 'staging';\n} else if (process.env.NODE_ENV === 'test' || process.env.NODE_ENV === 'testing') {\n  env = 'test';\n} else if (process.env.NODE_ENV === 'dev' || process.env.NODE_ENV === 'development' || !process.env.NODE_ENV) {\n  env = 'dev';\n} else {\n  throw new Error('Unknown environment name: NODE_ENV=' + nodeEnv);\n}\n```\n\n... can be simplified to ...\n\n```js\nvar env = require('get-env')({\n  staging: 'staging',\n  test: ['test', 'testing']\n});\n```\n\n\n## Matching rules for `process.env.NODE_ENV`\n\n* There are 2 pre-registered environments: `dev` and `prod`.\n* `prod` is returned when any of the following values are set: `prod`, `production`\n* `dev` is returned when the value is empty (default environment) or any of the following values are set: `dev`, `development`\n* It throws an **error** when the value is unregistered and non-empty. (catches typos)\n* It always expects a case-insensitive value. (i.e. `NODE_ENV=PROD` is equivalent to `NODE_ENV=prod`)\n* Extra environments can be optionally added in various methods. (see the usage section below)\n\n\n## Installation\n\n    $ npm install get-env\n\n\n## Usage\n\n```js\nvar env = require('get-env')();\n```\n\nThis returns either `dev` or `prod`. (pre-registered environments)\n\nExtra environments can be optionally added in addition to the pre-registered environments (`dev` and `prod`) with any of the following methods:\n\n### 1. Pass a string\n\n```js\nvar env = require('get-env')('test');\n```\n\n* Return `test` when the value is `TEST`.\n* Otherwise, return `dev` or `prod`. (default rules apply)\n\n### 2. Pass multiple strings as arguments or an array\n\n```js\nvar env = require('get-env')('docker', 'test');\n// OR\nvar env = require('get-env')(['docker', 'test']);\n```\n\n* Return `docker` when the value is `DOCKER`.\n* Return `test` when the value is `TEST`.\n* Otherwise, return `dev` or `prod`. (default rules apply)\n\n### 3. Pass a plain object\n\n```js\nvar env = require('get-env')({\n  docker: 'docker',  // or 'DOCKER'\n  test: ['test', 'testing'],  // or ['TEST', 'TESTING']\n  prod: ['pr', 'prod', 'production']  // or ['PR', 'PROD', 'PRODUCTION']\n});\n```\n\n* Return `docker` when the value is `docker`.\n* Return `test` when the value is `test` or `testing`.\n* Return `prod` when the value is `pr`, `prod`, or `production`. (pre-reigstered rules for `prod` are overriden)\n* Otherwise, return `dev`.\n\n\n## Credits\n\n  See the [contributors](https://github.com/pilwon/node-get-env/graphs/contributors).\n\n\n## License\n\n<pre>\nThe MIT License (MIT)\n\nCopyright (c) 2014 Pilwon Huh\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n</pre>\n\n[![Analytics](https://ga-beacon.appspot.com/UA-47034562-23/node-get-env/readme?pixel)](https://github.com/pilwon/node-get-env)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/pilwon/node-get-env/issues"
  },
  "_id": "get-env@0.4.0",
  "dist": {
    "shasum": "fcfe43dde12d046def20751a03ef8f5f0c208f25"
  },
  "_from": "get-env@0.4.0",
  "_resolved": "https://registry.npmjs.org/get-env/-/get-env-0.4.0.tgz"
}
