{
  "name": "fast-json-patch",
  "version": "0.5.2",
  "description": "Fast implementation of JSON-Patch (RFC-6902) with duplex (observe changes) capabilities",
  "homepage": "https://github.com/Starcounter-Jack/JSON-Patch",
  "keywords": [
    "json",
    "patch",
    "http",
    "rest"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/Starcounter-Jack/JSON-Patch.git"
  },
  "bugs": {
    "url": "https://github.com/Starcounter-Jack/JSON-Patch/issues"
  },
  "author": {
    "name": "Joachim Wester",
    "email": "joachimwester@me.com",
    "url": "http://www.starcounter.com/"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "main": "./src/json-patch-duplex",
  "engines": {
    "node": ">= 0.4.0"
  },
  "devDependencies": {
    "grunt": "^0.4.5",
    "grunt-bump": "^0.3.0",
    "grunt-contrib-uglify": "~0.5.0"
  },
  "readme": "JSON-Patch\r\n===============\r\n\r\nA leaner and meaner implementation of JSON-Patch. Small footprint. High performance.\r\n\r\nWith JSON-Patch, you can:\r\n- **apply** patches\r\n- **validate** a sequence of patches\r\n- **observe** for changes (and generate patches when a change is detected)\r\n- **compare** two objects (to obtain the difference)\r\n\r\n## Why you should use JSON-Patch\r\n\r\nJSON-Patch [(RFC6902)](http://tools.ietf.org/html/rfc6902) is a standard format that \r\nallows you to update a JSON document by sending the changes rather than the whole document. \r\nJSON Patch plays well with the HTTP PATCH verb (method) and REST style programming.\r\n\r\nMark Nottingham has a [nice blog]( http://www.mnot.net/blog/2012/09/05/patch) about it.\r\n\r\n## Footprint\r\n1.22 KB minified and gzipped (3 KB minified)\r\n\r\n## Performance\r\n![Fast](http://www.rebelslounge.com/res/jsonpatch/chart3.png)\r\n\r\n\r\n## Features\r\n* Allows you to apply patches on object trees for incoming traffic.\r\n* Allows you to freely manipulate object trees and then generate patches for outgoing traffic.\r\n* ES7 Object.observe() is used when available.\r\n* Tested in IE 8-11, Firefox, Chrome, Safari and Node.js\r\n\r\n\r\n## Install\r\n\r\nInstall the current version (and save it as a dependency):\r\n\r\n### npm\r\n\r\n```sh\r\n$ npm install fast-json-patch --save\r\n```\r\n### bower\r\n\r\n```sh\r\n$ bower install fast-json-patch --save\r\n```\r\n\r\n### [download as ZIP](https://github.com/Starcounter-Jack/JSON-Patch/archive/master.zip)\r\n\r\n\r\n## Adding to your project\r\n\r\n### In a web browser\r\n\r\nInclude `json-patch.js` if you want support for applying patches **or**\r\ninclude `json-patch-duplex.js` if you also want to generate patches.\r\n\r\n### In Node.js\r\n\r\nCall require to get the instance: \r\n\r\n```js\r\nvar jsonpatch = require('fast-json-patch')\r\n```\r\n\r\n:bulb: Node.js supports native `Object.observe` in preview release 0.11.x (and only when started with `--harmony_observation` flag). With stable versions of Node, a shimmed version of `Object.observe` is used.\r\n\r\n\r\n## Usage\r\n\r\nApplying patches:\r\n```js\r\nvar myobj = { firstName:\"Albert\", contactDetails: { phoneNumbers: [ ] } };\r\nvar patches = [\r\n   {op:\"replace\", path:\"/firstName\", value:\"Joachim\" },\r\n   {op:\"add\", path:\"/lastName\", value:\"Wester\" },\r\n   {op:\"add\", path:\"/contactDetails/phoneNumbers/0\", value:{ number:\"555-123\" }  }\r\n   ];\r\njsonpatch.apply( myobj, patches );\r\n// myobj == { firstName:\"Joachim\", lastName:\"Wester\", contactDetails:{ phoneNumbers[ {number:\"555-123\"} ] } };\r\n```\r\nGenerating patches:\r\n```js\r\nvar myobj = { firstName:\"Joachim\", lastName:\"Wester\", contactDetails: { phoneNumbers: [ { number:\"555-123\" }] } };\r\nobserver = jsonpatch.observe( myobj );\r\nmyobj.firstName = \"Albert\";\r\nmyobj.contactDetails.phoneNumbers[0].number = \"123\";\r\nmyobj.contactDetails.phoneNumbers.push({number:\"456\"});\r\nvar patches = jsonpatch.generate(observer);\r\n// patches  == [\r\n//   { op:\"replace\", path=\"/firstName\", value:\"Albert\"},\r\n//   { op:\"replace\", path=\"/contactDetails/phoneNumbers/0/number\", value:\"123\"},\r\n//   { op:\"add\", path=\"/contactDetails/phoneNumbers/1\", value:{number:\"456\"}}];\r\n```\r\nComparing two object trees:\r\n```js\r\nvar objA = {user: {firstName: \"Albert\", lastName: \"Einstein\"}};\r\nvar objB = {user: {firstName: \"Albert\", lastName: \"Collins\"}};\r\nvar diff = jsonpatch.compare(objA, objB));\r\n//diff == [{op: \"replace\", path: \"/user/lastName\", value: \"Collins\"}]\r\n```\r\n\r\nValidating a sequence of patches:\r\n```js\r\nvar obj = {user: {firstName: \"Albert\"}};\r\nvar patches = [{op: \"replace\", path: \"/user/firstName\", value: \"Albert\"}, {op: \"replace\", path: \"/user/lastName\", value: \"Einstein\"}];\r\nvar errors = jsonpatch.validate(patches, obj);\r\nif (errors.length == 0) {\r\n //there are no errors!\r\n}\r\nelse {\r\n  for (var i=0; i<errors.length; i++) {\r\n    if (!errors[i]) {\r\n      console.log(\"Valid patch at index\", i, patches[i]);\r\n    }\r\n    else {\r\n      console.error(\"Invalid patch at index\", i, errors[i], patches[i]);\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n\r\n## Testing\r\n\r\n### In a web browser\r\n\r\n1. Testing **json-patch.js**\r\n - Load `test/SpecRunner.html` in your web browser\r\n2. Testing **json-patch-duplex.js**\r\n - Load `test/SpecRunnerDuplex.html` in your web browser\r\n\r\nEach of the test suite files contains *Jasmine* unit test suite and *Benchmark.js* performance test suite.\r\n\r\nTo run *Benchmark.js* performance tests, press \"Run Tests\" button.\r\n\r\n### In Node.js\r\n\r\n1. Go to directory where you have cloned the repo\r\n2. Install Jasmine Node.js module by running command `npm install jasmine-node -g`\r\n3. Testing **json-patch.js**\r\n - Run command `jasmine-node --matchall --config duplex no test/spec/coreSpec.js`\r\n4. Testing **json-patch-duplex.js**\r\n - Run command `jasmine-node --matchall --config duplex yes test/spec/coreSpec.js test/spec/duplexSpec.js`\r\n\r\n## API\r\n\r\n#### jsonpatch.apply (`obj` Object, `patches` Array, `validate` Boolean) : boolean\r\n\r\nAvailable in *json-patch.js* and *json-patch-duplex.js*\r\n\r\nApplies `patches` array on `obj`.\r\n\r\nIf the `validate` parameter is set to `true`, the patch is extensively validated before applying.\r\nAn invalid patch results in throwing an error (see `jsonpatch.validate` for more information about the error object).\r\n\r\nIf patch was succesfully applied, returns `true`.\r\n\r\nIf there was a `test` patch in `patches` array, returns the result of the test.\r\n\r\nIf there was more than one patch in the array, the result of the last patch is returned.\r\n\r\n#### jsonpatch.observe (`obj` Object, `callback` Function (optional)) : `observer` Object\r\n\r\nAvailable in *json-patch-duplex.js*\r\n\r\nSets up an deep observer on `obj` that listens for changes in object tree. When changes are detected, the optional\r\ncallback is called with the generated patches array as the parameter.\r\n\r\nReturns `observer`.\r\n\r\n#### jsonpatch.generate (`obj` Object, `observer` Object) : `patches` Array\r\n\r\nAvailable in *json-patch-duplex.js*\r\n\r\nIf there are pending changes in `obj`, returns them synchronously. If a `callback` was defined in `observe`\r\nmethod, it will be triggered synchronously as well.\r\n\r\nIf there are no pending changes in `obj`, returns an empty array (length 0).\r\n\r\n#### jsonpatch.unobserve (`obj` Object, `observer` Object) : void\r\n\r\nAvailable in *json-patch-duplex.js*\r\n\r\nDestroys the observer set up on `obj`.\r\n\r\nAny remaining changes are delivered synchronously (as in `jsonpatch.generate`). Note: this is different that ES6/7 `Object.unobserve`, which delivers remaining changes asynchronously.\r\n\r\n#### jsonpatch.compare (`obj1` Object, `obj2` Object) : `patches` Array\r\n\r\nAvailable in *json-patch-duplex.js*\r\n\r\nCompares object trees `obj1` and `obj2` and returns the difference relative to `obj1` as a patches array.\r\n\r\nIf there are no differences, returns an empty array (length 0).\r\n\r\n#### jsonpatch.validate (`patches` Array, `tree` Object (optional)) : `error` JsonPatchError\r\n\r\nAvailable in *json-patch.js* and *json-patch-duplex.js*\r\n\r\nValidates a sequence of operations. If `tree` parameter is provided, the sequence is additionally validated against the object tree.\r\n\r\nIf there are no errors, returns undefined. If there is an errors, returns a JsonPatchError object with the following properties:\r\n\r\n- `name` String - short error code\r\n- `message` String - long human readable error message\r\n- `index` Number - index of the operation in the sequence\r\n- `operation` Object - reference to the operation\r\n- `tree` Object - reference to the tree\r\n\r\nPossible errors:\r\n\r\nError name                    | Error message\r\n------------------------------|------------\r\nSEQUENCE_NOT_AN_ARRAY         | Patch sequence must be an array\r\nOPERATION_NOT_AN_OBJECT       | Operation is not an object\r\nOPERATION_OP_INVALID          | Operation `op` property is not one of operations defined in RFC-6902\r\nOPERATION_PATH_INVALID        | Operation `path` property is not a string\r\nOPERATION_FROM_REQUIRED       | Operation `from` property is not present (applicable in `move` and `copy` operations)\r\nOPERATION_VALUE_REQUIRED      | Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)\r\nOPERATION_PATH_CANNOT_ADD     | Cannot perform an `add` operation at the desired path\r\nOPERATION_PATH_UNRESOLVABLE   | Cannot perform the operation at a path that does not exist\r\nOPERATION_FROM_UNRESOLVABLE   | Cannot perform the operation from a path that does not exist\r\nOPERATION_PATH_ILLEGAL_ARRAY_INDEX | Expected an unsigned base-10 integer value, making the new referenced value the array element with the zero-based index\r\nOPERATION_VALUE_OUT_OF_BOUNDS | The specified index MUST NOT be greater than the number of elements in the array\r\n\r\n## Changelog\r\n\r\nTo see the list of recent changes, see [Releases](https://github.com/Starcounter-Jack/JSON-Patch/releases).\r\n",
  "readmeFilename": "README.md",
  "_id": "fast-json-patch@0.5.2",
  "_from": "fast-json-patch@0.5.x"
}
